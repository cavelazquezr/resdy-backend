generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "restaurant", "menu", "booking", "rating", "list"]
}

model User {
  id          String        @id @default(uuid()) @db.VarChar(36)
  email       String        @unique @db.VarChar(254)
  firstname   String        @db.VarChar(20)
  lastname    String?       @db.VarChar(20)
  avatar_path String?       @db.VarChar(65529)
  phone       String?       @db.VarChar(10)
  password    String        @db.VarChar(20)
  created_at  DateTime      @default(now())
  is_active   Boolean       @default(true)
  is_owner    Boolean       @db.Boolean
  restaurants Restaurant[]
  ratings     Rating[]
  reservation Reservation[]
  save_list   SaveList[]

  @@map("users")
  @@schema("auth")
}

model Restaurant {
  id                     String                 @id @default(uuid()) @db.VarChar(36)
  name                   String                 @unique @db.VarChar(20)
  created_at             DateTime               @default(now())
  admin                  User                   @relation(fields: [admin_id], references: [id])
  admin_id               String
  customization          Customization?
  restaurant_information RestaurantInformation?
  category               Category[]
  dishes                 Dishes[]
  ratings                Rating[]
  reservation            Reservation[]
  save_list_item         SaveListItem[]
  restaurant_stadistic   RestaurantStadistics?

  @@map("restaurants")
  @@schema("restaurant")
}

model Customization {
  extra_customization       Json?      @db.Json
  headers_path              String[]   @default([])
  name                      String?    @db.VarChar(20)
  updated_at                DateTime   @updatedAt
  restaurant                Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id             String     @unique

  @@map("customization")
  @@schema("restaurant")
}

model RestaurantInformation {
  phone             String?    @db.VarChar(10)
  address           String?    @db.VarChar(30)
  city              String?    @db.VarChar(30)
  postal_code       String?    @db.VarChar(30)
  country           String?    @db.VarChar(30)
  social_media      Json?      @db.Json
  restaurant_type   String?    @db.VarChar(30)
  location          Json?      @db.Json
  description       String?    @db.VarChar(500)
  extra_information Json?      @db.Json
  updated_at        DateTime   @updatedAt
  restaurant        Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id     String     @unique

  @@map("restaurant_information")
  @@schema("restaurant")
}

model RestaurantStadistics {

  total_bookings  Int        @db.Integer
  restaurant      Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id   String     @unique

  @@map("restaurant_stadistics")
  @@schema("restaurant")
}

model Rating {
  id             String      @id @default(uuid()) @db.VarChar(36)
  rating         Int?        @db.Integer
  title          String?     @db.VarChar(50)
  comment        String?     @db.VarChar(400)
  status         String      @db.VarChar(30)
  answer         String?     @db.VarChar(400)
  created_at     DateTime    @default(now())
  updated_at     DateTime?   @updatedAt
  user           User        @relation(fields: [user_id], references: [id])
  user_id        String
  restaurant     Restaurant  @relation(fields: [restaurant_id], references: [id])
  restaurant_id  String

  @@map("rating")
  @@schema("rating")
}

model Reservation {
  id                  String     @id @default(uuid()) @db.VarChar(36)
  number_of_person    Int        @db.Integer
  date_of_reservation DateTime   @db.Date
  status              String     @db.VarChar(30)
  created_at          DateTime   @default(now())
  updated_at          DateTime?  @updatedAt
  user                User       @relation(fields: [user_id], references: [id])
  user_id             String
  restaurant          Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id       String

  @@map("reservation")
  @@schema("booking")
}

model Category {
  id            String     @id @default(uuid()) @db.VarChar(36)
  label         String     @db.VarChar(30)
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime?  @updatedAt
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String
  dishes        Dishes[]

  @@map("category")
  @@schema("menu")
}

model Dishes {
  id            String     @id @default(uuid()) @db.VarChar(36)
  name          String     @db.VarChar(30)
  photo_url     String?    @db.VarChar(65529)
  price         Decimal    @db.Decimal(10, 2)
  description   String?    @db.VarChar(400)
  allergen      String?    @db.VarChar(400)
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime?  @updatedAt
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String
  category      Category   @relation(fields: [category_id], references: [id])
  category_id   String

  @@map("dish")
  @@schema("menu")
}

model SaveList {
  id             String         @id @default(uuid()) @db.VarChar(36)
  name           String         @db.VarChar(30)
  emoji          String         @db.VarChar(50)
  color          String         @db.VarChar(7)
  user           User           @relation(fields: [user_id], references: [id])
  user_id        String
  save_list_item SaveListItem[]

  @@map("save_list")
  @@schema("list")
}

model SaveListItem {
  id            String     @id @default(uuid()) @db.VarChar(36)
  list          SaveList   @relation(fields: [list_id], references: [id])
  list_id       String
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String

  @@map("save_list_item")
  @@schema("list")
}